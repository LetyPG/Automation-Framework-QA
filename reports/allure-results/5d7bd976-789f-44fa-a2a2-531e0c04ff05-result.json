{"name": "test_valid_submission", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.InvalidArgumentException: Message: invalid argument: 'value' must be a string\n  (Session info: chrome=136.0.7103.48)\nStacktrace:\n\tGetHandleVerifier [0x00007FF73B1DCF25+75717]\n\tGetHandleVerifier [0x00007FF73B1DCF80+75808]\n\t(No symbol) [0x00007FF73AFA8F9A]\n\t(No symbol) [0x00007FF73AFFF28E]\n\t(No symbol) [0x00007FF73AFFF77C]\n\t(No symbol) [0x00007FF73B052577]\n\t(No symbol) [0x00007FF73B0273BF]\n\t(No symbol) [0x00007FF73B04F39C]\n\t(No symbol) [0x00007FF73B027153]\n\t(No symbol) [0x00007FF73AFF0421]\n\t(No symbol) [0x00007FF73AFF11B3]\n\tGetHandleVerifier [0x00007FF73B4DD6FD+3223453]\n\tGetHandleVerifier [0x00007FF73B4D7CA2+3200322]\n\tGetHandleVerifier [0x00007FF73B4F5AD3+3322739]\n\tGetHandleVerifier [0x00007FF73B1F69FA+180890]\n\tGetHandleVerifier [0x00007FF73B1FE0FF+211359]\n\tGetHandleVerifier [0x00007FF73B1E5274+109332]\n\tGetHandleVerifier [0x00007FF73B1E5422+109762]\n\tGetHandleVerifier [0x00007FF73B1CBA39+4825]\n\tBaseThreadInitThunk [0x00007FF8BEB4E8D7+23]\n\tRtlUserThreadStart [0x00007FF8BFC114FC+44]", "trace": "driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"e2f2e5f3e25df902cdc28c45d2fb08fc\")>\n\n    @pytest.mark.usefixtures(\"driver\")\n    def test_valid_submission(driver):\n        user = generate_user()\n    \n    \n        page = FormSubmission(driver)\n        page.open(Configuration.SUBMISSION_URL)\n    \n>       page.fill_name(user[\"first_name\"])\n\ntests\\test_form_submission.py:15: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npages\\page_form_submission.py:10: in fill_name\n    self.send_keys(Configuration.FIRST_NAME_INPUT, name)\npages\\base_actions.py:46: in send_keys\n    input_field = self.find(locator)\npages\\base_actions.py:34: in find\n    return self.wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, locator)))\n..\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py:96: in until\n    value = method(self._driver)\n..\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\support\\expected_conditions.py:84: in _predicate\n    return driver.find_element(*locator)\n..\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:748: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n..\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:354: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001B601F11C40>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"invalid argument\",\"message\":\"invalid argument: \\'value\\' must be a string...3B1CBA39+4825]\\\\n\\\\tBaseThreadInitThunk [0x00007FF8BEB4E8D7+23]\\\\n\\\\tRtlUserThreadStart [0x00007FF8BFC114FC+44]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.InvalidArgumentException: Message: invalid argument: 'value' must be a string\nE         (Session info: chrome=136.0.7103.48)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF73B1DCF25+75717]\nE       \tGetHandleVerifier [0x00007FF73B1DCF80+75808]\nE       \t(No symbol) [0x00007FF73AFA8F9A]\nE       \t(No symbol) [0x00007FF73AFFF28E]\nE       \t(No symbol) [0x00007FF73AFFF77C]\nE       \t(No symbol) [0x00007FF73B052577]\nE       \t(No symbol) [0x00007FF73B0273BF]\nE       \t(No symbol) [0x00007FF73B04F39C]\nE       \t(No symbol) [0x00007FF73B027153]\nE       \t(No symbol) [0x00007FF73AFF0421]\nE       \t(No symbol) [0x00007FF73AFF11B3]\nE       \tGetHandleVerifier [0x00007FF73B4DD6FD+3223453]\nE       \tGetHandleVerifier [0x00007FF73B4D7CA2+3200322]\nE       \tGetHandleVerifier [0x00007FF73B4F5AD3+3322739]\nE       \tGetHandleVerifier [0x00007FF73B1F69FA+180890]\nE       \tGetHandleVerifier [0x00007FF73B1FE0FF+211359]\nE       \tGetHandleVerifier [0x00007FF73B1E5274+109332]\nE       \tGetHandleVerifier [0x00007FF73B1E5422+109762]\nE       \tGetHandleVerifier [0x00007FF73B1CBA39+4825]\nE       \tBaseThreadInitThunk [0x00007FF8BEB4E8D7+23]\nE       \tRtlUserThreadStart [0x00007FF8BFC114FC+44]\n\n..\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: InvalidArgumentException"}, "attachments": [{"name": "log", "source": "05438d1d-6dec-4470-b3c7-42ebdd51e0d7-attachment.txt", "type": "text/plain"}, {"name": "stderr", "source": "c42113e4-e404-4601-a2b3-81843013d8cd-attachment.txt", "type": "text/plain"}], "start": 1746634635161, "stop": 1746634637218, "uuid": "20f469b6-eb6c-4e4a-a8c3-a437a9394dd9", "historyId": "8e345a23e714e36afbebf8bba9c3fc31", "testCaseId": "8e345a23e714e36afbebf8bba9c3fc31", "fullName": "tests.test_form_submission#test_valid_submission", "labels": [{"name": "tag", "value": "@pytest.mark.usefixtures('driver')"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_form_submission"}, {"name": "host", "value": "jaso5"}, {"name": "thread", "value": "19300-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_form_submission"}]}